// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	zerolog "github.com/rs/zerolog"
	mock "github.com/stretchr/testify/mock"
)

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with no fields
func (_m *MockLogger) Debug() *zerolog.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Debug")
	}

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Debug() *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug")}
}

func (_c *MockLogger_Debug_Call) Run(run func()) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return(_a0 *zerolog.Event) *MockLogger_Debug_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func() *zerolog.Event) *MockLogger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with no fields
func (_m *MockLogger) Error() *zerolog.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Error() *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockLogger_Error_Call) Run(run func()) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return(_a0 *zerolog.Event) *MockLogger_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func() *zerolog.Event) *MockLogger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Fatal provides a mock function with no fields
func (_m *MockLogger) Fatal() *zerolog.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fatal")
	}

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// MockLogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type MockLogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Fatal() *MockLogger_Fatal_Call {
	return &MockLogger_Fatal_Call{Call: _e.mock.On("Fatal")}
}

func (_c *MockLogger_Fatal_Call) Run(run func()) *MockLogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Fatal_Call) Return(_a0 *zerolog.Event) *MockLogger_Fatal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_Fatal_Call) RunAndReturn(run func() *zerolog.Event) *MockLogger_Fatal_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with no fields
func (_m *MockLogger) Info() *zerolog.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Info() *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info")}
}

func (_c *MockLogger_Info_Call) Run(run func()) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return(_a0 *zerolog.Event) *MockLogger_Info_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func() *zerolog.Event) *MockLogger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Panic provides a mock function with no fields
func (_m *MockLogger) Panic() *zerolog.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Panic")
	}

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// MockLogger_Panic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panic'
type MockLogger_Panic_Call struct {
	*mock.Call
}

// Panic is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Panic() *MockLogger_Panic_Call {
	return &MockLogger_Panic_Call{Call: _e.mock.On("Panic")}
}

func (_c *MockLogger_Panic_Call) Run(run func()) *MockLogger_Panic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Panic_Call) Return(_a0 *zerolog.Event) *MockLogger_Panic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_Panic_Call) RunAndReturn(run func() *zerolog.Event) *MockLogger_Panic_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with no fields
func (_m *MockLogger) Warn() *zerolog.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Warn")
	}

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Warn() *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn")}
}

func (_c *MockLogger_Warn_Call) Run(run func()) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return(_a0 *zerolog.Event) *MockLogger_Warn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_Warn_Call) RunAndReturn(run func() *zerolog.Event) *MockLogger_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
