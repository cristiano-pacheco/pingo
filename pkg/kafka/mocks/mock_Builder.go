// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	kafka "github.com/cristiano-pacheco/pingo/pkg/kafka"
	mock "github.com/stretchr/testify/mock"
)

// MockBuilder is an autogenerated mock type for the Builder type
type MockBuilder struct {
	mock.Mock
}

type MockBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBuilder) EXPECT() *MockBuilder_Expecter {
	return &MockBuilder_Expecter{mock: &_m.Mock}
}

// BuildConsumer provides a mock function with given fields: topic, groupID
func (_m *MockBuilder) BuildConsumer(topic string, groupID string) kafka.Consumer {
	ret := _m.Called(topic, groupID)

	if len(ret) == 0 {
		panic("no return value specified for BuildConsumer")
	}

	var r0 kafka.Consumer
	if rf, ok := ret.Get(0).(func(string, string) kafka.Consumer); ok {
		r0 = rf(topic, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.Consumer)
		}
	}

	return r0
}

// MockBuilder_BuildConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildConsumer'
type MockBuilder_BuildConsumer_Call struct {
	*mock.Call
}

// BuildConsumer is a helper method to define mock.On call
//   - topic string
//   - groupID string
func (_e *MockBuilder_Expecter) BuildConsumer(topic interface{}, groupID interface{}) *MockBuilder_BuildConsumer_Call {
	return &MockBuilder_BuildConsumer_Call{Call: _e.mock.On("BuildConsumer", topic, groupID)}
}

func (_c *MockBuilder_BuildConsumer_Call) Run(run func(topic string, groupID string)) *MockBuilder_BuildConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockBuilder_BuildConsumer_Call) Return(_a0 kafka.Consumer) *MockBuilder_BuildConsumer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBuilder_BuildConsumer_Call) RunAndReturn(run func(string, string) kafka.Consumer) *MockBuilder_BuildConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// BuildProducer provides a mock function with given fields: topic
func (_m *MockBuilder) BuildProducer(topic string) kafka.Producer {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for BuildProducer")
	}

	var r0 kafka.Producer
	if rf, ok := ret.Get(0).(func(string) kafka.Producer); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.Producer)
		}
	}

	return r0
}

// MockBuilder_BuildProducer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildProducer'
type MockBuilder_BuildProducer_Call struct {
	*mock.Call
}

// BuildProducer is a helper method to define mock.On call
//   - topic string
func (_e *MockBuilder_Expecter) BuildProducer(topic interface{}) *MockBuilder_BuildProducer_Call {
	return &MockBuilder_BuildProducer_Call{Call: _e.mock.On("BuildProducer", topic)}
}

func (_c *MockBuilder_BuildProducer_Call) Run(run func(topic string)) *MockBuilder_BuildProducer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBuilder_BuildProducer_Call) Return(_a0 kafka.Producer) *MockBuilder_BuildProducer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBuilder_BuildProducer_Call) RunAndReturn(run func(string) kafka.Producer) *MockBuilder_BuildProducer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBuilder creates a new instance of MockBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBuilder {
	mock := &MockBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
