// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	oteltrace "go.opentelemetry.io/otel/trace"
)

// MockTrace is an autogenerated mock type for the Trace type
type MockTrace struct {
	mock.Mock
}

type MockTrace_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTrace) EXPECT() *MockTrace_Expecter {
	return &MockTrace_Expecter{mock: &_m.Mock}
}

// Shutdown provides a mock function with given fields: ctx
func (_m *MockTrace) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTrace_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockTrace_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTrace_Expecter) Shutdown(ctx interface{}) *MockTrace_Shutdown_Call {
	return &MockTrace_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockTrace_Shutdown_Call) Run(run func(ctx context.Context)) *MockTrace_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTrace_Shutdown_Call) Return(_a0 error) *MockTrace_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrace_Shutdown_Call) RunAndReturn(run func(context.Context) error) *MockTrace_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// StartSpan provides a mock function with given fields: ctx, name
func (_m *MockTrace) StartSpan(ctx context.Context, name string) (context.Context, oteltrace.Span) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for StartSpan")
	}

	var r0 context.Context
	var r1 oteltrace.Span
	if rf, ok := ret.Get(0).(func(context.Context, string) (context.Context, oteltrace.Span)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) oteltrace.Span); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(oteltrace.Span)
		}
	}

	return r0, r1
}

// MockTrace_StartSpan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSpan'
type MockTrace_StartSpan_Call struct {
	*mock.Call
}

// StartSpan is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTrace_Expecter) StartSpan(ctx interface{}, name interface{}) *MockTrace_StartSpan_Call {
	return &MockTrace_StartSpan_Call{Call: _e.mock.On("StartSpan", ctx, name)}
}

func (_c *MockTrace_StartSpan_Call) Run(run func(ctx context.Context, name string)) *MockTrace_StartSpan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTrace_StartSpan_Call) Return(_a0 context.Context, _a1 oteltrace.Span) *MockTrace_StartSpan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTrace_StartSpan_Call) RunAndReturn(run func(context.Context, string) (context.Context, oteltrace.Span)) *MockTrace_StartSpan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTrace creates a new instance of MockTrace. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTrace(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTrace {
	mock := &MockTrace{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
