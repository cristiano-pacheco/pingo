// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	service "github.com/cristiano-pacheco/pingo/internal/modules/identity/service"
	mock "github.com/stretchr/testify/mock"
)

// MockEmailTemplateService is an autogenerated mock type for the EmailTemplateService type
type MockEmailTemplateService struct {
	mock.Mock
}

type MockEmailTemplateService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailTemplateService) EXPECT() *MockEmailTemplateService_Expecter {
	return &MockEmailTemplateService_Expecter{mock: &_m.Mock}
}

// CompileAccountConfirmationTemplate provides a mock function with given fields: input
func (_m *MockEmailTemplateService) CompileAccountConfirmationTemplate(input service.AccountConfirmationInput) (string, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CompileAccountConfirmationTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(service.AccountConfirmationInput) (string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(service.AccountConfirmationInput) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(service.AccountConfirmationInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEmailTemplateService_CompileAccountConfirmationTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileAccountConfirmationTemplate'
type MockEmailTemplateService_CompileAccountConfirmationTemplate_Call struct {
	*mock.Call
}

// CompileAccountConfirmationTemplate is a helper method to define mock.On call
//   - input service.AccountConfirmationInput
func (_e *MockEmailTemplateService_Expecter) CompileAccountConfirmationTemplate(input interface{}) *MockEmailTemplateService_CompileAccountConfirmationTemplate_Call {
	return &MockEmailTemplateService_CompileAccountConfirmationTemplate_Call{Call: _e.mock.On("CompileAccountConfirmationTemplate", input)}
}

func (_c *MockEmailTemplateService_CompileAccountConfirmationTemplate_Call) Run(run func(input service.AccountConfirmationInput)) *MockEmailTemplateService_CompileAccountConfirmationTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(service.AccountConfirmationInput))
	})
	return _c
}

func (_c *MockEmailTemplateService_CompileAccountConfirmationTemplate_Call) Return(_a0 string, _a1 error) *MockEmailTemplateService_CompileAccountConfirmationTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEmailTemplateService_CompileAccountConfirmationTemplate_Call) RunAndReturn(run func(service.AccountConfirmationInput) (string, error)) *MockEmailTemplateService_CompileAccountConfirmationTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// CompileAuthVerificationCodeTemplate provides a mock function with given fields: name, code
func (_m *MockEmailTemplateService) CompileAuthVerificationCodeTemplate(name string, code string) (string, error) {
	ret := _m.Called(name, code)

	if len(ret) == 0 {
		panic("no return value specified for CompileAuthVerificationCodeTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(name, code)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, code)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEmailTemplateService_CompileAuthVerificationCodeTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileAuthVerificationCodeTemplate'
type MockEmailTemplateService_CompileAuthVerificationCodeTemplate_Call struct {
	*mock.Call
}

// CompileAuthVerificationCodeTemplate is a helper method to define mock.On call
//   - name string
//   - code string
func (_e *MockEmailTemplateService_Expecter) CompileAuthVerificationCodeTemplate(name interface{}, code interface{}) *MockEmailTemplateService_CompileAuthVerificationCodeTemplate_Call {
	return &MockEmailTemplateService_CompileAuthVerificationCodeTemplate_Call{Call: _e.mock.On("CompileAuthVerificationCodeTemplate", name, code)}
}

func (_c *MockEmailTemplateService_CompileAuthVerificationCodeTemplate_Call) Run(run func(name string, code string)) *MockEmailTemplateService_CompileAuthVerificationCodeTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEmailTemplateService_CompileAuthVerificationCodeTemplate_Call) Return(_a0 string, _a1 error) *MockEmailTemplateService_CompileAuthVerificationCodeTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEmailTemplateService_CompileAuthVerificationCodeTemplate_Call) RunAndReturn(run func(string, string) (string, error)) *MockEmailTemplateService_CompileAuthVerificationCodeTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEmailTemplateService creates a new instance of MockEmailTemplateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailTemplateService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailTemplateService {
	mock := &MockEmailTemplateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
