// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/cristiano-pacheco/pingo/internal/modules/identity/event"
	mock "github.com/stretchr/testify/mock"
)

// MockUserAuthenticatedProducer is an autogenerated mock type for the UserAuthenticatedProducer type
type MockUserAuthenticatedProducer struct {
	mock.Mock
}

type MockUserAuthenticatedProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserAuthenticatedProducer) EXPECT() *MockUserAuthenticatedProducer_Expecter {
	return &MockUserAuthenticatedProducer_Expecter{mock: &_m.Mock}
}

// Produce provides a mock function with given fields: ctx, message
func (_m *MockUserAuthenticatedProducer) Produce(ctx context.Context, message event.UserAuthenticatedMessage) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Produce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, event.UserAuthenticatedMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserAuthenticatedProducer_Produce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Produce'
type MockUserAuthenticatedProducer_Produce_Call struct {
	*mock.Call
}

// Produce is a helper method to define mock.On call
//   - ctx context.Context
//   - message event.UserAuthenticatedMessage
func (_e *MockUserAuthenticatedProducer_Expecter) Produce(ctx interface{}, message interface{}) *MockUserAuthenticatedProducer_Produce_Call {
	return &MockUserAuthenticatedProducer_Produce_Call{Call: _e.mock.On("Produce", ctx, message)}
}

func (_c *MockUserAuthenticatedProducer_Produce_Call) Run(run func(ctx context.Context, message event.UserAuthenticatedMessage)) *MockUserAuthenticatedProducer_Produce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(event.UserAuthenticatedMessage))
	})
	return _c
}

func (_c *MockUserAuthenticatedProducer_Produce_Call) Return(_a0 error) *MockUserAuthenticatedProducer_Produce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAuthenticatedProducer_Produce_Call) RunAndReturn(run func(context.Context, event.UserAuthenticatedMessage) error) *MockUserAuthenticatedProducer_Produce_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserAuthenticatedProducer creates a new instance of MockUserAuthenticatedProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserAuthenticatedProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserAuthenticatedProducer {
	mock := &MockUserAuthenticatedProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
