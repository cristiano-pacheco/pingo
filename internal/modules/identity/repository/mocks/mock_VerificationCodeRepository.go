// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/cristiano-pacheco/pingo/internal/modules/identity/model"
	mock "github.com/stretchr/testify/mock"
)

// MockVerificationCodeRepository is an autogenerated mock type for the VerificationCodeRepository type
type MockVerificationCodeRepository struct {
	mock.Mock
}

type MockVerificationCodeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerificationCodeRepository) EXPECT() *MockVerificationCodeRepository_Expecter {
	return &MockVerificationCodeRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, v
func (_m *MockVerificationCodeRepository) Create(ctx context.Context, v model.VerificationCodeModel) (model.VerificationCodeModel, error) {
	ret := _m.Called(ctx, v)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.VerificationCodeModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.VerificationCodeModel) (model.VerificationCodeModel, error)); ok {
		return rf(ctx, v)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.VerificationCodeModel) model.VerificationCodeModel); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Get(0).(model.VerificationCodeModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.VerificationCodeModel) error); ok {
		r1 = rf(ctx, v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVerificationCodeRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockVerificationCodeRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - v model.VerificationCodeModel
func (_e *MockVerificationCodeRepository_Expecter) Create(ctx interface{}, v interface{}) *MockVerificationCodeRepository_Create_Call {
	return &MockVerificationCodeRepository_Create_Call{Call: _e.mock.On("Create", ctx, v)}
}

func (_c *MockVerificationCodeRepository_Create_Call) Run(run func(ctx context.Context, v model.VerificationCodeModel)) *MockVerificationCodeRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.VerificationCodeModel))
	})
	return _c
}

func (_c *MockVerificationCodeRepository_Create_Call) Return(_a0 model.VerificationCodeModel, _a1 error) *MockVerificationCodeRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVerificationCodeRepository_Create_Call) RunAndReturn(run func(context.Context, model.VerificationCodeModel) (model.VerificationCodeModel, error)) *MockVerificationCodeRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByUserID provides a mock function with given fields: ctx, userID
func (_m *MockVerificationCodeRepository) DeleteByUserID(ctx context.Context, userID uint64) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVerificationCodeRepository_DeleteByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUserID'
type MockVerificationCodeRepository_DeleteByUserID_Call struct {
	*mock.Call
}

// DeleteByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *MockVerificationCodeRepository_Expecter) DeleteByUserID(ctx interface{}, userID interface{}) *MockVerificationCodeRepository_DeleteByUserID_Call {
	return &MockVerificationCodeRepository_DeleteByUserID_Call{Call: _e.mock.On("DeleteByUserID", ctx, userID)}
}

func (_c *MockVerificationCodeRepository_DeleteByUserID_Call) Run(run func(ctx context.Context, userID uint64)) *MockVerificationCodeRepository_DeleteByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockVerificationCodeRepository_DeleteByUserID_Call) Return(_a0 error) *MockVerificationCodeRepository_DeleteByUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerificationCodeRepository_DeleteByUserID_Call) RunAndReturn(run func(context.Context, uint64) error) *MockVerificationCodeRepository_DeleteByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserAndCode provides a mock function with given fields: ctx, userID, code
func (_m *MockVerificationCodeRepository) FindByUserAndCode(ctx context.Context, userID uint64, code string) (model.VerificationCodeModel, error) {
	ret := _m.Called(ctx, userID, code)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserAndCode")
	}

	var r0 model.VerificationCodeModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) (model.VerificationCodeModel, error)); ok {
		return rf(ctx, userID, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) model.VerificationCodeModel); ok {
		r0 = rf(ctx, userID, code)
	} else {
		r0 = ret.Get(0).(model.VerificationCodeModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, string) error); ok {
		r1 = rf(ctx, userID, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVerificationCodeRepository_FindByUserAndCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserAndCode'
type MockVerificationCodeRepository_FindByUserAndCode_Call struct {
	*mock.Call
}

// FindByUserAndCode is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
//   - code string
func (_e *MockVerificationCodeRepository_Expecter) FindByUserAndCode(ctx interface{}, userID interface{}, code interface{}) *MockVerificationCodeRepository_FindByUserAndCode_Call {
	return &MockVerificationCodeRepository_FindByUserAndCode_Call{Call: _e.mock.On("FindByUserAndCode", ctx, userID, code)}
}

func (_c *MockVerificationCodeRepository_FindByUserAndCode_Call) Run(run func(ctx context.Context, userID uint64, code string)) *MockVerificationCodeRepository_FindByUserAndCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(string))
	})
	return _c
}

func (_c *MockVerificationCodeRepository_FindByUserAndCode_Call) Return(_a0 model.VerificationCodeModel, _a1 error) *MockVerificationCodeRepository_FindByUserAndCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVerificationCodeRepository_FindByUserAndCode_Call) RunAndReturn(run func(context.Context, uint64, string) (model.VerificationCodeModel, error)) *MockVerificationCodeRepository_FindByUserAndCode_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, v
func (_m *MockVerificationCodeRepository) Update(ctx context.Context, v model.VerificationCodeModel) error {
	ret := _m.Called(ctx, v)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.VerificationCodeModel) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVerificationCodeRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockVerificationCodeRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - v model.VerificationCodeModel
func (_e *MockVerificationCodeRepository_Expecter) Update(ctx interface{}, v interface{}) *MockVerificationCodeRepository_Update_Call {
	return &MockVerificationCodeRepository_Update_Call{Call: _e.mock.On("Update", ctx, v)}
}

func (_c *MockVerificationCodeRepository_Update_Call) Run(run func(ctx context.Context, v model.VerificationCodeModel)) *MockVerificationCodeRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.VerificationCodeModel))
	})
	return _c
}

func (_c *MockVerificationCodeRepository_Update_Call) Return(_a0 error) *MockVerificationCodeRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerificationCodeRepository_Update_Call) RunAndReturn(run func(context.Context, model.VerificationCodeModel) error) *MockVerificationCodeRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerificationCodeRepository creates a new instance of MockVerificationCodeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerificationCodeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerificationCodeRepository {
	mock := &MockVerificationCodeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
