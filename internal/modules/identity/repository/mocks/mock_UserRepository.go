// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/cristiano-pacheco/pingo/internal/modules/identity/model"
	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user
func (_m *MockUserRepository) Create(ctx context.Context, user model.UserModel) (model.UserModel, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserModel) (model.UserModel, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserModel) model.UserModel); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(model.UserModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserModel) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user model.UserModel
func (_e *MockUserRepository_Expecter) Create(ctx interface{}, user interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(ctx context.Context, user model.UserModel)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserModel))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(_a0 model.UserModel, _a1 error) *MockUserRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(context.Context, model.UserModel) (model.UserModel, error)) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserRepository) FindByEmail(ctx context.Context, email string) (model.UserModel, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.UserModel, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.UserModel); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(model.UserModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type MockUserRepository_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserRepository_Expecter) FindByEmail(ctx interface{}, email interface{}) *MockUserRepository_FindByEmail_Call {
	return &MockUserRepository_FindByEmail_Call{Call: _e.mock.On("FindByEmail", ctx, email)}
}

func (_c *MockUserRepository_FindByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepository_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_FindByEmail_Call) Return(_a0 model.UserModel, _a1 error) *MockUserRepository_FindByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_FindByEmail_Call) RunAndReturn(run func(context.Context, string) (model.UserModel, error)) *MockUserRepository_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, userID
func (_m *MockUserRepository) FindByID(ctx context.Context, userID uint64) (model.UserModel, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (model.UserModel, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) model.UserModel); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.UserModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockUserRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *MockUserRepository_Expecter) FindByID(ctx interface{}, userID interface{}) *MockUserRepository_FindByID_Call {
	return &MockUserRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, userID)}
}

func (_c *MockUserRepository_FindByID_Call) Run(run func(ctx context.Context, userID uint64)) *MockUserRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockUserRepository_FindByID_Call) Return(_a0 model.UserModel, _a1 error) *MockUserRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_FindByID_Call) RunAndReturn(run func(context.Context, uint64) (model.UserModel, error)) *MockUserRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindPendingConfirmation provides a mock function with given fields: ctx, confirmationToken
func (_m *MockUserRepository) FindPendingConfirmation(ctx context.Context, confirmationToken []byte) (model.UserModel, error) {
	ret := _m.Called(ctx, confirmationToken)

	if len(ret) == 0 {
		panic("no return value specified for FindPendingConfirmation")
	}

	var r0 model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (model.UserModel, error)); ok {
		return rf(ctx, confirmationToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) model.UserModel); ok {
		r0 = rf(ctx, confirmationToken)
	} else {
		r0 = ret.Get(0).(model.UserModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, confirmationToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindPendingConfirmation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPendingConfirmation'
type MockUserRepository_FindPendingConfirmation_Call struct {
	*mock.Call
}

// FindPendingConfirmation is a helper method to define mock.On call
//   - ctx context.Context
//   - confirmationToken []byte
func (_e *MockUserRepository_Expecter) FindPendingConfirmation(ctx interface{}, confirmationToken interface{}) *MockUserRepository_FindPendingConfirmation_Call {
	return &MockUserRepository_FindPendingConfirmation_Call{Call: _e.mock.On("FindPendingConfirmation", ctx, confirmationToken)}
}

func (_c *MockUserRepository_FindPendingConfirmation_Call) Run(run func(ctx context.Context, confirmationToken []byte)) *MockUserRepository_FindPendingConfirmation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *MockUserRepository_FindPendingConfirmation_Call) Return(_a0 model.UserModel, _a1 error) *MockUserRepository_FindPendingConfirmation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_FindPendingConfirmation_Call) RunAndReturn(run func(context.Context, []byte) (model.UserModel, error)) *MockUserRepository_FindPendingConfirmation_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserActivated provides a mock function with given fields: ctx, userID
func (_m *MockUserRepository) IsUserActivated(ctx context.Context, userID uint64) (bool, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserActivated")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_IsUserActivated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserActivated'
type MockUserRepository_IsUserActivated_Call struct {
	*mock.Call
}

// IsUserActivated is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *MockUserRepository_Expecter) IsUserActivated(ctx interface{}, userID interface{}) *MockUserRepository_IsUserActivated_Call {
	return &MockUserRepository_IsUserActivated_Call{Call: _e.mock.On("IsUserActivated", ctx, userID)}
}

func (_c *MockUserRepository_IsUserActivated_Call) Run(run func(ctx context.Context, userID uint64)) *MockUserRepository_IsUserActivated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockUserRepository_IsUserActivated_Call) Return(_a0 bool, _a1 error) *MockUserRepository_IsUserActivated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_IsUserActivated_Call) RunAndReturn(run func(context.Context, uint64) (bool, error)) *MockUserRepository_IsUserActivated_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *MockUserRepository) Update(ctx context.Context, user model.UserModel) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserModel) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user model.UserModel
func (_e *MockUserRepository_Expecter) Update(ctx interface{}, user interface{}) *MockUserRepository_Update_Call {
	return &MockUserRepository_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *MockUserRepository_Update_Call) Run(run func(ctx context.Context, user model.UserModel)) *MockUserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserModel))
	})
	return _c
}

func (_c *MockUserRepository_Update_Call) Return(_a0 error) *MockUserRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_Update_Call) RunAndReturn(run func(context.Context, model.UserModel) error) *MockUserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
