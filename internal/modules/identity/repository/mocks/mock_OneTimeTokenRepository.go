// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	enum "github.com/cristiano-pacheco/pingo/internal/modules/identity/enum"
	mock "github.com/stretchr/testify/mock"

	model "github.com/cristiano-pacheco/pingo/internal/modules/identity/model"
)

// MockOneTimeTokenRepository is an autogenerated mock type for the OneTimeTokenRepository type
type MockOneTimeTokenRepository struct {
	mock.Mock
}

type MockOneTimeTokenRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOneTimeTokenRepository) EXPECT() *MockOneTimeTokenRepository_Expecter {
	return &MockOneTimeTokenRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, token
func (_m *MockOneTimeTokenRepository) Create(ctx context.Context, token model.OneTimeTokenModel) (model.OneTimeTokenModel, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.OneTimeTokenModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OneTimeTokenModel) (model.OneTimeTokenModel, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OneTimeTokenModel) model.OneTimeTokenModel); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(model.OneTimeTokenModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OneTimeTokenModel) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOneTimeTokenRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOneTimeTokenRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - token model.OneTimeTokenModel
func (_e *MockOneTimeTokenRepository_Expecter) Create(ctx interface{}, token interface{}) *MockOneTimeTokenRepository_Create_Call {
	return &MockOneTimeTokenRepository_Create_Call{Call: _e.mock.On("Create", ctx, token)}
}

func (_c *MockOneTimeTokenRepository_Create_Call) Run(run func(ctx context.Context, token model.OneTimeTokenModel)) *MockOneTimeTokenRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OneTimeTokenModel))
	})
	return _c
}

func (_c *MockOneTimeTokenRepository_Create_Call) Return(_a0 model.OneTimeTokenModel, _a1 error) *MockOneTimeTokenRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOneTimeTokenRepository_Create_Call) RunAndReturn(run func(context.Context, model.OneTimeTokenModel) (model.OneTimeTokenModel, error)) *MockOneTimeTokenRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, userID, tokenTypeEnum
func (_m *MockOneTimeTokenRepository) Delete(ctx context.Context, userID uint64, tokenTypeEnum enum.TokenTypeEnum) error {
	ret := _m.Called(ctx, userID, tokenTypeEnum)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, enum.TokenTypeEnum) error); ok {
		r0 = rf(ctx, userID, tokenTypeEnum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOneTimeTokenRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockOneTimeTokenRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
//   - tokenTypeEnum enum.TokenTypeEnum
func (_e *MockOneTimeTokenRepository_Expecter) Delete(ctx interface{}, userID interface{}, tokenTypeEnum interface{}) *MockOneTimeTokenRepository_Delete_Call {
	return &MockOneTimeTokenRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, userID, tokenTypeEnum)}
}

func (_c *MockOneTimeTokenRepository_Delete_Call) Run(run func(ctx context.Context, userID uint64, tokenTypeEnum enum.TokenTypeEnum)) *MockOneTimeTokenRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(enum.TokenTypeEnum))
	})
	return _c
}

func (_c *MockOneTimeTokenRepository_Delete_Call) Return(_a0 error) *MockOneTimeTokenRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOneTimeTokenRepository_Delete_Call) RunAndReturn(run func(context.Context, uint64, enum.TokenTypeEnum) error) *MockOneTimeTokenRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, userID, tokenTypeEnum
func (_m *MockOneTimeTokenRepository) Find(ctx context.Context, userID uint64, tokenTypeEnum enum.TokenTypeEnum) (model.OneTimeTokenModel, error) {
	ret := _m.Called(ctx, userID, tokenTypeEnum)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 model.OneTimeTokenModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, enum.TokenTypeEnum) (model.OneTimeTokenModel, error)); ok {
		return rf(ctx, userID, tokenTypeEnum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, enum.TokenTypeEnum) model.OneTimeTokenModel); ok {
		r0 = rf(ctx, userID, tokenTypeEnum)
	} else {
		r0 = ret.Get(0).(model.OneTimeTokenModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, enum.TokenTypeEnum) error); ok {
		r1 = rf(ctx, userID, tokenTypeEnum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOneTimeTokenRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockOneTimeTokenRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
//   - tokenTypeEnum enum.TokenTypeEnum
func (_e *MockOneTimeTokenRepository_Expecter) Find(ctx interface{}, userID interface{}, tokenTypeEnum interface{}) *MockOneTimeTokenRepository_Find_Call {
	return &MockOneTimeTokenRepository_Find_Call{Call: _e.mock.On("Find", ctx, userID, tokenTypeEnum)}
}

func (_c *MockOneTimeTokenRepository_Find_Call) Run(run func(ctx context.Context, userID uint64, tokenTypeEnum enum.TokenTypeEnum)) *MockOneTimeTokenRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(enum.TokenTypeEnum))
	})
	return _c
}

func (_c *MockOneTimeTokenRepository_Find_Call) Return(_a0 model.OneTimeTokenModel, _a1 error) *MockOneTimeTokenRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOneTimeTokenRepository_Find_Call) RunAndReturn(run func(context.Context, uint64, enum.TokenTypeEnum) (model.OneTimeTokenModel, error)) *MockOneTimeTokenRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOneTimeTokenRepository creates a new instance of MockOneTimeTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOneTimeTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOneTimeTokenRepository {
	mock := &MockOneTimeTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
