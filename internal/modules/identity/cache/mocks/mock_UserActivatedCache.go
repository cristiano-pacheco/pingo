// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockUserActivatedCache is an autogenerated mock type for the UserActivatedCache type
type MockUserActivatedCache struct {
	mock.Mock
}

type MockUserActivatedCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserActivatedCache) EXPECT() *MockUserActivatedCache_Expecter {
	return &MockUserActivatedCache_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: userID
func (_m *MockUserActivatedCache) Delete(userID uint64) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserActivatedCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserActivatedCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - userID uint64
func (_e *MockUserActivatedCache_Expecter) Delete(userID interface{}) *MockUserActivatedCache_Delete_Call {
	return &MockUserActivatedCache_Delete_Call{Call: _e.mock.On("Delete", userID)}
}

func (_c *MockUserActivatedCache_Delete_Call) Run(run func(userID uint64)) *MockUserActivatedCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockUserActivatedCache_Delete_Call) Return(_a0 error) *MockUserActivatedCache_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserActivatedCache_Delete_Call) RunAndReturn(run func(uint64) error) *MockUserActivatedCache_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: userID
func (_m *MockUserActivatedCache) Get(userID uint64) (bool, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (bool, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserActivatedCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUserActivatedCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - userID uint64
func (_e *MockUserActivatedCache_Expecter) Get(userID interface{}) *MockUserActivatedCache_Get_Call {
	return &MockUserActivatedCache_Get_Call{Call: _e.mock.On("Get", userID)}
}

func (_c *MockUserActivatedCache_Get_Call) Run(run func(userID uint64)) *MockUserActivatedCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockUserActivatedCache_Get_Call) Return(_a0 bool, _a1 error) *MockUserActivatedCache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserActivatedCache_Get_Call) RunAndReturn(run func(uint64) (bool, error)) *MockUserActivatedCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: userID
func (_m *MockUserActivatedCache) Set(userID uint64) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserActivatedCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockUserActivatedCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - userID uint64
func (_e *MockUserActivatedCache_Expecter) Set(userID interface{}) *MockUserActivatedCache_Set_Call {
	return &MockUserActivatedCache_Set_Call{Call: _e.mock.On("Set", userID)}
}

func (_c *MockUserActivatedCache_Set_Call) Run(run func(userID uint64)) *MockUserActivatedCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockUserActivatedCache_Set_Call) Return(_a0 error) *MockUserActivatedCache_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserActivatedCache_Set_Call) RunAndReturn(run func(uint64) error) *MockUserActivatedCache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserActivatedCache creates a new instance of MockUserActivatedCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserActivatedCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserActivatedCache {
	mock := &MockUserActivatedCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
