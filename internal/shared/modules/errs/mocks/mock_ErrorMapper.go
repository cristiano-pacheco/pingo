// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockErrorMapper is an autogenerated mock type for the ErrorMapper type
type MockErrorMapper struct {
	mock.Mock
}

type MockErrorMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorMapper) EXPECT() *MockErrorMapper_Expecter {
	return &MockErrorMapper_Expecter{mock: &_m.Mock}
}

// Map provides a mock function with given fields: err
func (_m *MockErrorMapper) Map(err error) error {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for Map")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockErrorMapper_Map_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Map'
type MockErrorMapper_Map_Call struct {
	*mock.Call
}

// Map is a helper method to define mock.On call
//   - err error
func (_e *MockErrorMapper_Expecter) Map(err interface{}) *MockErrorMapper_Map_Call {
	return &MockErrorMapper_Map_Call{Call: _e.mock.On("Map", err)}
}

func (_c *MockErrorMapper_Map_Call) Run(run func(err error)) *MockErrorMapper_Map_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockErrorMapper_Map_Call) Return(_a0 error) *MockErrorMapper_Map_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockErrorMapper_Map_Call) RunAndReturn(run func(error) error) *MockErrorMapper_Map_Call {
	_c.Call.Return(run)
	return _c
}

// MapCustomError provides a mock function with given fields: status, message
func (_m *MockErrorMapper) MapCustomError(status int, message string) error {
	ret := _m.Called(status, message)

	if len(ret) == 0 {
		panic("no return value specified for MapCustomError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(status, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockErrorMapper_MapCustomError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapCustomError'
type MockErrorMapper_MapCustomError_Call struct {
	*mock.Call
}

// MapCustomError is a helper method to define mock.On call
//   - status int
//   - message string
func (_e *MockErrorMapper_Expecter) MapCustomError(status interface{}, message interface{}) *MockErrorMapper_MapCustomError_Call {
	return &MockErrorMapper_MapCustomError_Call{Call: _e.mock.On("MapCustomError", status, message)}
}

func (_c *MockErrorMapper_MapCustomError_Call) Run(run func(status int, message string)) *MockErrorMapper_MapCustomError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockErrorMapper_MapCustomError_Call) Return(_a0 error) *MockErrorMapper_MapCustomError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockErrorMapper_MapCustomError_Call) RunAndReturn(run func(int, string) error) *MockErrorMapper_MapCustomError_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockErrorMapper creates a new instance of MockErrorMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorMapper {
	mock := &MockErrorMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
