// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockMailerTemplate is an autogenerated mock type for the MailerTemplate type
type MockMailerTemplate struct {
	mock.Mock
}

type MockMailerTemplate_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailerTemplate) EXPECT() *MockMailerTemplate_Expecter {
	return &MockMailerTemplate_Expecter{mock: &_m.Mock}
}

// CompileBlankTemplate provides a mock function with given fields: templateName, data
func (_m *MockMailerTemplate) CompileBlankTemplate(templateName string, data interface{}) (string, error) {
	ret := _m.Called(templateName, data)

	if len(ret) == 0 {
		panic("no return value specified for CompileBlankTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (string, error)); ok {
		return rf(templateName, data)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) string); ok {
		r0 = rf(templateName, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(templateName, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMailerTemplate_CompileBlankTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileBlankTemplate'
type MockMailerTemplate_CompileBlankTemplate_Call struct {
	*mock.Call
}

// CompileBlankTemplate is a helper method to define mock.On call
//   - templateName string
//   - data interface{}
func (_e *MockMailerTemplate_Expecter) CompileBlankTemplate(templateName interface{}, data interface{}) *MockMailerTemplate_CompileBlankTemplate_Call {
	return &MockMailerTemplate_CompileBlankTemplate_Call{Call: _e.mock.On("CompileBlankTemplate", templateName, data)}
}

func (_c *MockMailerTemplate_CompileBlankTemplate_Call) Run(run func(templateName string, data interface{})) *MockMailerTemplate_CompileBlankTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockMailerTemplate_CompileBlankTemplate_Call) Return(_a0 string, _a1 error) *MockMailerTemplate_CompileBlankTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMailerTemplate_CompileBlankTemplate_Call) RunAndReturn(run func(string, interface{}) (string, error)) *MockMailerTemplate_CompileBlankTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// CompileTemplate provides a mock function with given fields: templateName, data
func (_m *MockMailerTemplate) CompileTemplate(templateName string, data interface{}) (string, error) {
	ret := _m.Called(templateName, data)

	if len(ret) == 0 {
		panic("no return value specified for CompileTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (string, error)); ok {
		return rf(templateName, data)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) string); ok {
		r0 = rf(templateName, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(templateName, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMailerTemplate_CompileTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileTemplate'
type MockMailerTemplate_CompileTemplate_Call struct {
	*mock.Call
}

// CompileTemplate is a helper method to define mock.On call
//   - templateName string
//   - data interface{}
func (_e *MockMailerTemplate_Expecter) CompileTemplate(templateName interface{}, data interface{}) *MockMailerTemplate_CompileTemplate_Call {
	return &MockMailerTemplate_CompileTemplate_Call{Call: _e.mock.On("CompileTemplate", templateName, data)}
}

func (_c *MockMailerTemplate_CompileTemplate_Call) Run(run func(templateName string, data interface{})) *MockMailerTemplate_CompileTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockMailerTemplate_CompileTemplate_Call) Return(_a0 string, _a1 error) *MockMailerTemplate_CompileTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMailerTemplate_CompileTemplate_Call) RunAndReturn(run func(string, interface{}) (string, error)) *MockMailerTemplate_CompileTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMailerTemplate creates a new instance of MockMailerTemplate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailerTemplate(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailerTemplate {
	mock := &MockMailerTemplate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
