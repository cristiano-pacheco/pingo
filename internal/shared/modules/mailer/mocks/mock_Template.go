// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	mailer "github.com/cristiano-pacheco/pingo/internal/shared/modules/mailer"
	mock "github.com/stretchr/testify/mock"
)

// MockTemplate is an autogenerated mock type for the Template type
type MockTemplate struct {
	mock.Mock
}

type MockTemplate_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplate) EXPECT() *MockTemplate_Expecter {
	return &MockTemplate_Expecter{mock: &_m.Mock}
}

// CompileBlankTemplate provides a mock function with given fields: input
func (_m *MockTemplate) CompileBlankTemplate(input mailer.CompileTemplateInput) (string, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CompileBlankTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(mailer.CompileTemplateInput) (string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(mailer.CompileTemplateInput) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(mailer.CompileTemplateInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemplate_CompileBlankTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileBlankTemplate'
type MockTemplate_CompileBlankTemplate_Call struct {
	*mock.Call
}

// CompileBlankTemplate is a helper method to define mock.On call
//   - input mailer.CompileTemplateInput
func (_e *MockTemplate_Expecter) CompileBlankTemplate(input interface{}) *MockTemplate_CompileBlankTemplate_Call {
	return &MockTemplate_CompileBlankTemplate_Call{Call: _e.mock.On("CompileBlankTemplate", input)}
}

func (_c *MockTemplate_CompileBlankTemplate_Call) Run(run func(input mailer.CompileTemplateInput)) *MockTemplate_CompileBlankTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(mailer.CompileTemplateInput))
	})
	return _c
}

func (_c *MockTemplate_CompileBlankTemplate_Call) Return(_a0 string, _a1 error) *MockTemplate_CompileBlankTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemplate_CompileBlankTemplate_Call) RunAndReturn(run func(mailer.CompileTemplateInput) (string, error)) *MockTemplate_CompileBlankTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// CompileTemplate provides a mock function with given fields: input
func (_m *MockTemplate) CompileTemplate(input mailer.CompileTemplateInput) (string, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CompileTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(mailer.CompileTemplateInput) (string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(mailer.CompileTemplateInput) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(mailer.CompileTemplateInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemplate_CompileTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileTemplate'
type MockTemplate_CompileTemplate_Call struct {
	*mock.Call
}

// CompileTemplate is a helper method to define mock.On call
//   - input mailer.CompileTemplateInput
func (_e *MockTemplate_Expecter) CompileTemplate(input interface{}) *MockTemplate_CompileTemplate_Call {
	return &MockTemplate_CompileTemplate_Call{Call: _e.mock.On("CompileTemplate", input)}
}

func (_c *MockTemplate_CompileTemplate_Call) Run(run func(input mailer.CompileTemplateInput)) *MockTemplate_CompileTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(mailer.CompileTemplateInput))
	})
	return _c
}

func (_c *MockTemplate_CompileTemplate_Call) Return(_a0 string, _a1 error) *MockTemplate_CompileTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemplate_CompileTemplate_Call) RunAndReturn(run func(mailer.CompileTemplateInput) (string, error)) *MockTemplate_CompileTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemplate creates a new instance of MockTemplate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplate(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplate {
	mock := &MockTemplate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
