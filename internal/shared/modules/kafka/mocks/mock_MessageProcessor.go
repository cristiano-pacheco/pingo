// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pkgkafka "github.com/cristiano-pacheco/pingo/pkg/kafka"
)

// MockMessageProcessor is an autogenerated mock type for the MessageProcessor type
type MockMessageProcessor struct {
	mock.Mock
}

type MockMessageProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageProcessor) EXPECT() *MockMessageProcessor_Expecter {
	return &MockMessageProcessor_Expecter{mock: &_m.Mock}
}

// GroupID provides a mock function with no fields
func (_m *MockMessageProcessor) GroupID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GroupID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMessageProcessor_GroupID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupID'
type MockMessageProcessor_GroupID_Call struct {
	*mock.Call
}

// GroupID is a helper method to define mock.On call
func (_e *MockMessageProcessor_Expecter) GroupID() *MockMessageProcessor_GroupID_Call {
	return &MockMessageProcessor_GroupID_Call{Call: _e.mock.On("GroupID")}
}

func (_c *MockMessageProcessor_GroupID_Call) Run(run func()) *MockMessageProcessor_GroupID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageProcessor_GroupID_Call) Return(_a0 string) *MockMessageProcessor_GroupID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageProcessor_GroupID_Call) RunAndReturn(run func() string) *MockMessageProcessor_GroupID_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessMessage provides a mock function with given fields: ctx, msg
func (_m *MockMessageProcessor) ProcessMessage(ctx context.Context, msg pkgkafka.Message) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for ProcessMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgkafka.Message) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageProcessor_ProcessMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessMessage'
type MockMessageProcessor_ProcessMessage_Call struct {
	*mock.Call
}

// ProcessMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - msg pkgkafka.Message
func (_e *MockMessageProcessor_Expecter) ProcessMessage(ctx interface{}, msg interface{}) *MockMessageProcessor_ProcessMessage_Call {
	return &MockMessageProcessor_ProcessMessage_Call{Call: _e.mock.On("ProcessMessage", ctx, msg)}
}

func (_c *MockMessageProcessor_ProcessMessage_Call) Run(run func(ctx context.Context, msg pkgkafka.Message)) *MockMessageProcessor_ProcessMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkgkafka.Message))
	})
	return _c
}

func (_c *MockMessageProcessor_ProcessMessage_Call) Return(_a0 error) *MockMessageProcessor_ProcessMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageProcessor_ProcessMessage_Call) RunAndReturn(run func(context.Context, pkgkafka.Message) error) *MockMessageProcessor_ProcessMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Topic provides a mock function with no fields
func (_m *MockMessageProcessor) Topic() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMessageProcessor_Topic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topic'
type MockMessageProcessor_Topic_Call struct {
	*mock.Call
}

// Topic is a helper method to define mock.On call
func (_e *MockMessageProcessor_Expecter) Topic() *MockMessageProcessor_Topic_Call {
	return &MockMessageProcessor_Topic_Call{Call: _e.mock.On("Topic")}
}

func (_c *MockMessageProcessor_Topic_Call) Run(run func()) *MockMessageProcessor_Topic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageProcessor_Topic_Call) Return(_a0 string) *MockMessageProcessor_Topic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageProcessor_Topic_Call) RunAndReturn(run func() string) *MockMessageProcessor_Topic_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageProcessor creates a new instance of MockMessageProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageProcessor {
	mock := &MockMessageProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
